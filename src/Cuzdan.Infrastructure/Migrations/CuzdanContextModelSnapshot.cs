// <auto-generated />
using System;
using Cuzdan.Domain.Enums;
using Cuzdan.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cuzdan.Infrastructure.Migrations
{
    [DbContext(typeof(CuzdanContext))]
    partial class CuzdanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "currency_type", new[] { "try", "usd", "eur", "gbp", "jpy" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transaction_status", new[] { "pending", "completed", "failed", "cancelled", "processing", "reversed", "expired", "on_hold" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transaction_type", new[] { "transfer", "deposit", "withdrawal" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "user", "admin", "system" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cuzdan.Application.DTOs.UserBalanceByCurrencyDto", b =>
                {
                    b.Property<CurrencyType>("CurrencyType")
                        .HasColumnType("currency_type");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric");

                    b.ToTable("UserBalanceByCurrencyDto");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ConvertedAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<CurrencyType>("OriginalCurrency")
                        .HasColumnType("currency_type");

                    b.Property<TransactionStatus>("Status")
                        .HasColumnType("transaction_status");

                    b.Property<CurrencyType>("TargetCurrency")
                        .HasColumnType("currency_type");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.Property<TransactionType>("Type")
                        .HasColumnType("transaction_type");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<UserRole>("Role")
                        .HasColumnType("user_role");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "system@cuzdan.local",
                            Name = "System",
                            PasswordHash = "",
                            Role = UserRole.System
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@cuzdan.local",
                            Name = "Admin",
                            PasswordHash = "$2a$11$HogwQY.S0cgV47QbDgFb.eCeW8AUEFH64rgEWPiTbmSPFTpGdz/Wu",
                            Role = UserRole.Admin
                        });
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<CurrencyType>("Currency")
                        .HasColumnType("currency_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AvailableBalance = 0m,
                            Balance = 0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Currency = CurrencyType.TRY,
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WalletName = "System Wallet"
                        });
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Cuzdan.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Cuzdan.Domain.Entities.Wallet", "From")
                        .WithMany("SentTransactions")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cuzdan.Domain.Entities.Wallet", "To")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Cuzdan.Domain.Entities.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Cuzdan.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SentTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
